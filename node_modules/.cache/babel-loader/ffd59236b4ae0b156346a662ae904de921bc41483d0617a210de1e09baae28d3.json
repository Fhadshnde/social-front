{"ast":null,"code":"import { authActions } from \"../slices/authSlice\";\nimport request from \"../../utils/request\";\nimport { toast } from \"react-toastify\";\n\n// Login User\nexport function loginUser(user) {\n  return async dispatch => {\n    try {\n      console.log('Sending user data:', user);\n      const {\n        data\n      } = await request.post(\"/api/auth/login\", user);\n      console.log('Server response:', data);\n      dispatch(authActions.login(data));\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Login error:', error);\n      toast.error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"An unexpected error occurred. Please try again.\");\n    }\n  };\n}\n\n// Logout User\nexport function logoutUser() {\n  return dispatch => {\n    dispatch(authActions.logout());\n    localStorage.removeItem(\"userInfo\");\n  };\n}\n\n// Register User\nexport function registerUser(user) {\n  return async dispatch => {\n    try {\n      console.log('Registering user:', user);\n      const {\n        data\n      } = await request.post(\"/api/auth/register\", user);\n      console.log('Registration response:', data);\n      dispatch(authActions.register(data.message));\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Registration error:', error);\n      const errorMessage = (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message;\n      if (errorMessage === \"Email already registered.\") {\n        toast.error(\"Email is already registered. Please use another email.\");\n      } else if (errorMessage.includes(\"username already exists\")) {\n        toast.error(\"Username is already taken. Please choose another one.\");\n      } else {\n        toast.error(errorMessage);\n      }\n    }\n  };\n}\n\n// Verify Email\nexport function verifyEmail(userId, token) {\n  return async dispatch => {\n    try {\n      console.log(`Verifying email for user ID: ${userId}, Token: ${token}`);\n      await request.get(`/api/auth/${userId}/verify/${token}`);\n      dispatch(authActions.setIsEmailVerified());\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error(\"Error verifying email:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || \"An unexpected error occurred. Please try again.\");\n    }\n  };\n}","map":{"version":3,"names":["authActions","request","toast","loginUser","user","dispatch","console","log","data","post","login","localStorage","setItem","JSON","stringify","error","_error$response","_error$response$data","response","message","logoutUser","logout","removeItem","registerUser","register","_error$response2","_error$response2$data","errorMessage","includes","verifyEmail","userId","token","get","setIsEmailVerified","_error$response3","_error$response3$data"],"sources":["D:/Blog-pro/frontend/src/redux/apiCalls/authApiCall.js"],"sourcesContent":["import { authActions } from \"../slices/authSlice\";\nimport request from \"../../utils/request\";\nimport { toast } from \"react-toastify\";\n\n// Login User\nexport function loginUser(user) {\n    return async (dispatch) => {\n      try {\n        console.log('Sending user data:', user);\n        const { data } = await request.post(\"/api/auth/login\", user);\n        console.log('Server response:', data);\n        dispatch(authActions.login(data));\n        localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      } catch (error) {\n        console.error('Login error:', error);\n        toast.error(error.response?.data?.message || \"An unexpected error occurred. Please try again.\");\n      }\n    }\n}\n\n// Logout User\nexport function logoutUser() {\n  return (dispatch) => {\n    dispatch(authActions.logout());\n    localStorage.removeItem(\"userInfo\");\n  }\n}\n\n// Register User\nexport function registerUser(user) {\n  return async (dispatch) => {\n    try {\n      console.log('Registering user:', user);\n      const { data } = await request.post(\"/api/auth/register\", user);\n      console.log('Registration response:', data);\n      dispatch(authActions.register(data.message));\n    } catch (error) {\n      console.error('Registration error:', error);\n      const errorMessage = error.response?.data?.message;\n      if (errorMessage === \"Email already registered.\") {\n        toast.error(\"Email is already registered. Please use another email.\");\n      } else if (errorMessage.includes(\"username already exists\")) {\n        toast.error(\"Username is already taken. Please choose another one.\");\n      } else {\n        toast.error(errorMessage);\n      }\n    }\n  }\n}\n\n// Verify Email\nexport function verifyEmail(userId, token) {\n  return async (dispatch) => {\n    try {\n      console.log(`Verifying email for user ID: ${userId}, Token: ${token}`);\n      await request.get(`/api/auth/${userId}/verify/${token}`);\n      dispatch(authActions.setIsEmailVerified());\n    } catch (error) {\n      console.error(\"Error verifying email:\", error.response?.data?.message || \"An unexpected error occurred. Please try again.\");\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
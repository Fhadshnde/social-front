{"ast":null,"code":"import { postActions } from \"../slices/postSlice\";\nimport { commentActions } from \"../slices/commentSlice\";\nimport request from \"../../utils/request\";\nimport { toast } from \"react-toastify\";\n\n// Create Comment\nexport function createComment(newComment) {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        data\n      } = await request.post(\"/api/comments\", newComment, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.user.token\n        }\n      });\n      dispatch(postActions.addCommentToPost(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Update Comment\nexport function updateComment(commentId, comment) {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        data\n      } = await request.put(`/api/comments/${commentId}`, comment, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.user.token\n        }\n      });\n      dispatch(postActions.updateCommentPost(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Delete Comment\nexport function deleteComment(commentId) {\n  return async (dispatch, getState) => {\n    try {\n      await request.delete(`/api/comments/${commentId}`, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.user.token\n        }\n      });\n      dispatch(commentActions.deleteComment(commentId));\n      dispatch(postActions.deleteCommentFromPost(commentId));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Fetch All Comments\nexport function fetchAllComments() {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        data\n      } = await request.get(`/api/comments`, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.user.token\n        }\n      });\n      dispatch(commentActions.setComments(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}","map":{"version":3,"names":["postActions","commentActions","request","toast","createComment","newComment","dispatch","getState","data","post","headers","Authorization","auth","user","token","addCommentToPost","error","response","message","updateComment","commentId","comment","put","updateCommentPost","deleteComment","delete","deleteCommentFromPost","fetchAllComments","get","setComments"],"sources":["D:/Blog-pro/frontend/src/redux/apiCalls/commentApiCall.js"],"sourcesContent":["import { postActions } from \"../slices/postSlice\";\nimport { commentActions } from \"../slices/commentSlice\";\nimport request from \"../../utils/request\";\nimport { toast } from \"react-toastify\";\n\n// Create Comment\nexport function createComment(newComment) {\n  return async (dispatch, getState) => {\n    try {\n      const { data } = await request.post(\"/api/comments\", newComment, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.user.token,\n        },\n      });\n      dispatch(postActions.addCommentToPost(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Update Comment\nexport function updateComment(commentId, comment) {\n  return async (dispatch, getState) => {\n    try {\n      const { data } = await request.put(\n        `/api/comments/${commentId}`,\n        comment,\n        {\n          headers: {\n            Authorization: \"Bearer \" + getState().auth.user.token,\n          },\n        }\n      );\n      dispatch(postActions.updateCommentPost(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Delete Comment\nexport function deleteComment(commentId) {\n  return async (dispatch, getState) => {\n    try {\n      await request.delete(`/api/comments/${commentId}`, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.user.token,\n        },\n      });\n      dispatch(commentActions.deleteComment(commentId));\n      dispatch(postActions.deleteCommentFromPost(commentId));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Fetch All Comments\nexport function fetchAllComments() {\n  return async (dispatch, getState) => {\n    try {\n      const { data } = await request.get(`/api/comments`, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.user.token,\n        },\n      });\n      dispatch(commentActions.setComments(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
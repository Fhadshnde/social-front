{"ast":null,"code":"var _jsxFileName = \"D:\\\\Blog-pro\\\\frontend\\\\src\\\\pages\\\\forms\\\\ResetPassword.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"./form.css\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ResetPassword = () => {\n  _s();\n  const [password, setPassword] = useState(\"\");\n  const [isError, setIsError] = useState(false);\n  const {\n    userId,\n    token\n  } = useParams();\n  useEffect(() => {\n    const fetchResetPassword = async () => {\n      if (userId !== \"validUserId\" || token !== \"validToken\") {\n        setIsError(true);\n      }\n    };\n    fetchResetPassword();\n  }, [userId, token]);\n\n  // Form Submit Handler\n  const formSubmitHandler = e => {\n    e.preventDefault();\n    if (password.trim() === \"\") return toast.error(\"Password is required\");\n\n    // محاكاة إعادة تعيين كلمة المرور\n    toast.success(\"Password reset successfully!\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"form-container\",\n    children: isError ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Not Found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"form-title\",\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: formSubmitHandler,\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            className: \"form-label\",\n            children: \"New Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            className: \"form-input\",\n            id: \"password\",\n            placeholder: \"Enter your new password\",\n            value: password,\n            onChange: e => setPassword(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"form-btn\",\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(ResetPassword, \"BtFOvw5+i1zQa1Pw+GjxZ8dXyTA=\", false, function () {\n  return [useParams];\n});\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["useState","useEffect","toast","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","ResetPassword","_s","password","setPassword","isError","setIsError","userId","token","fetchResetPassword","formSubmitHandler","e","preventDefault","trim","error","success","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","placeholder","value","onChange","target","required","_c","$RefreshReg$"],"sources":["D:/Blog-pro/frontend/src/pages/forms/ResetPassword.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"./form.css\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst ResetPassword = () => {\r\n  const [password, setPassword] = useState(\"\");\r\n  const [isError, setIsError] = useState(false);\r\n\r\n  const { userId, token } = useParams();\r\n\r\n  useEffect(() => {\r\n    const fetchResetPassword = async () => {\r\n      if (userId !== \"validUserId\" || token !== \"validToken\") {\r\n        setIsError(true);\r\n      }\r\n    };\r\n    fetchResetPassword();\r\n  }, [userId, token]); \r\n\r\n  // Form Submit Handler\r\n  const formSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (password.trim() === \"\") return toast.error(\"Password is required\");\r\n\r\n    // محاكاة إعادة تعيين كلمة المرور\r\n    toast.success(\"Password reset successfully!\");\r\n  };\r\n\r\n  return (\r\n    <section className=\"form-container\">\r\n      {isError ? (\r\n        <h1>Not Found</h1>\r\n      ) : (\r\n        <>\r\n          <h1 className=\"form-title\">Reset Password</h1>\r\n          <form onSubmit={formSubmitHandler} className=\"form\">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"password\" className=\"form-label\">\r\n                New Password\r\n              </label>\r\n              <input\r\n                type=\"password\"\r\n                className=\"form-input\"\r\n                id=\"password\"\r\n                placeholder=\"Enter your new password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                required \r\n              />\r\n            </div>\r\n            <button className=\"form-btn\" type=\"submit\">\r\n              Submit\r\n            </button>\r\n          </form>\r\n        </>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
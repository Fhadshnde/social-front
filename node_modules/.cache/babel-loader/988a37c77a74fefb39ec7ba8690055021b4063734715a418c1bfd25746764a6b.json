{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst postSlice = createSlice({\n  name: \"post\",\n  initialState: {\n    posts: [],\n    postsCount: null,\n    postsCate: [],\n    loading: false,\n    isPostCreated: false,\n    post: null\n  },\n  reducers: {\n    setPosts(state, action) {\n      state.posts = action.payload;\n    },\n    setPostsCount(state, action) {\n      state.postsCount = action.payload;\n    },\n    setPostsCate(state, action) {\n      state.postsCate = action.payload;\n    },\n    setLoading(state) {\n      state.loading = true;\n    },\n    clearLoading(state) {\n      state.loading = false;\n    },\n    setIsPostCreated(state) {\n      state.isPostCreated = true;\n      state.loading = false;\n    },\n    clearIsPostCreated(state) {\n      state.isPostCreated = false;\n    },\n    setPost(state, action) {\n      state.post = action.payload;\n    },\n    setLike(state, action) {\n      state.post.likes = action.payload.likes;\n    },\n    deletePost(state, action) {\n      state.posts = state.posts.filter(p => p._id !== action.payload);\n    },\n    addCommentToPost(state, action) {\n      state.post.comments.push(action.payload);\n    },\n    updateCommentPost(state, action) {\n      state.post.comments = state.post.comments.map(commment => commment._id === action.payload._id ? action.payload : commment);\n    },\n    deleteCommentFromPost(state, action) {\n      const comment = state.post.comments.find(c => c._id === action.payload);\n      const commentIndex = state.post.comments.indexOf(comment);\n      state.post.comments.splice(commentIndex, 1);\n    }\n  }\n});\nconst postReducer = postSlice.reducer;\nconst postActions = postSlice.actions;\nexport { postActions, postReducer };","map":{"version":3,"names":["createSlice","postSlice","name","initialState","posts","postsCount","postsCate","loading","isPostCreated","post","reducers","setPosts","state","action","payload","setPostsCount","setPostsCate","setLoading","clearLoading","setIsPostCreated","clearIsPostCreated","setPost","setLike","likes","deletePost","filter","p","_id","addCommentToPost","comments","push","updateCommentPost","map","commment","deleteCommentFromPost","comment","find","c","commentIndex","indexOf","splice","postReducer","reducer","postActions","actions"],"sources":["D:/Blog-pro/frontend/src/redux/slices/postSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst postSlice = createSlice({\n  name: \"post\",\n  initialState: {\n    posts: [],\n    postsCount: null,\n    postsCate: [],\n    loading: false,\n    isPostCreated: false,\n    post:null,\n  },\n  reducers: {\n    setPosts(state, action) {\n      state.posts = action.payload;\n    },\n    setPostsCount(state, action) {\n      state.postsCount = action.payload;\n    },\n    setPostsCate(state, action) {\n      state.postsCate = action.payload;\n    },\n    setLoading(state) {\n      state.loading = true;\n    },\n    clearLoading(state) {\n      state.loading = false;\n    },\n    setIsPostCreated(state) {\n      state.isPostCreated = true;\n      state.loading = false;\n    },\n    clearIsPostCreated(state) {\n      state.isPostCreated = false;\n    },\n    setPost(state,action) {\n      state.post = action.payload;\n    },\n    setLike(state,action) {\n      state.post.likes = action.payload.likes;\n    },\n    deletePost(state,action) {\n      state.posts = state.posts.filter(p => p._id !== action.payload);\n    },\n    addCommentToPost(state,action) {\n      state.post.comments.push(action.payload);\n    },\n    updateCommentPost(state,action) {\n      state.post.comments = state.post.comments.map(commment => \n        commment._id === action.payload._id ? action.payload : commment\n      )\n    },\n    deleteCommentFromPost(state, action) {\n      const comment = state.post.comments.find(c => c._id === action.payload);\n      const commentIndex = state.post.comments.indexOf(comment);\n\n      state.post.comments.splice(commentIndex, 1);\n    }\n  },\n});\n\nconst postReducer = postSlice.reducer;\nconst postActions = postSlice.actions;\n\nexport { postActions, postReducer };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}